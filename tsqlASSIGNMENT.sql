/*SET UP  AND DDL*/
CREATE DATABASE myDB;
USE myDB;

IF OBJECT_ID('Sale') IS NOT NULL
DROP TABLE SALE;

IF OBJECT_ID('Product') IS NOT NULL
DROP TABLE PRODUCT;

IF OBJECT_ID('Customer') IS NOT NULL
DROP TABLE CUSTOMER;

IF OBJECT_ID('Location') IS NOT NULL
DROP TABLE LOCATION;

GO

CREATE TABLE CUSTOMER (
CUSTID	INT
, CUSTNAME	NVARCHAR(100)
, SALES_YTD	MONEY
, STATUS	NVARCHAR(7)
, PRIMARY KEY	(CUSTID) 
);


CREATE TABLE PRODUCT (
PRODID	INT
, PRODNAME	NVARCHAR(100)
, SELLING_PRICE	MONEY
, SALES_YTD	MONEY
, PRIMARY KEY	(PRODID)
);

CREATE TABLE SALE (
SALEID	BIGINT
, CUSTID	INT
, PRODID	INT
, QTY	INT
, PRICE	MONEY
, SALEDATE	DATE
, PRIMARY KEY 	(SALEID)
, FOREIGN KEY 	(CUSTID) REFERENCES CUSTOMER
, FOREIGN KEY 	(PRODID) REFERENCES PRODUCT
);

CREATE TABLE LOCATION (
  LOCID	NVARCHAR(5)
, MINQTY	INTEGER
, MAXQTY	INTEGER
, PRIMARY KEY 	(LOCID)
, CONSTRAINT CHECK_LOCID_LENGTH CHECK (LEN(LOCID) = 5)
, CONSTRAINT CHECK_MINQTY_RANGE CHECK (MINQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_RANGE CHECK (MAXQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_GREATER_MIXQTY CHECK (MAXQTY >= MINQTY)
);

IF OBJECT_ID('SALE_SEQ') IS NOT NULL
DROP SEQUENCE SALE_SEQ;
CREATE SEQUENCE SALE_SEQ;

GO

SELECT 
    *
FROM
    information_schema.tables;

/*PROCEDURE 1*/
IF OBJECT_ID('ADD_CUSTOMER') IS NOT NULL
DROP PROCEDURE ADD_CUSTOMER;

GO
CREATE PROCEDURE ADD_CUSTOMER @PCUSTID INT, @PCUSTNAME NVARCHAR(100) AS

BEGIN
    BEGIN TRY

        IF @PCUSTID < 1 OR @PCUSTID > 499
            THROW 50020, 'Customer ID out of range', 1

        INSERT INTO CUSTOMER (CUSTID, CUSTNAME, SALES_YTD, STATUS) 
        VALUES (@PCUSTID, @PCUSTNAME, 0, 'OK');

    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER() = 2627
            THROW 50010, 'Duplicate customer ID', 1
        ELSE IF ERROR_NUMBER() = 50020
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END; 
    END CATCH;

END;

GO

EXEC ADD_CUSTOMER @PCUSTID = 1, @PCUSTNAME = 'David';

EXEC ADD_CUSTOMER @PCUSTID = 499, @PCUSTNAME = 'Oswald';

EXEC ADD_CUSTOMER @PCUSTID = 255, @PCUSTNAME = 'Nathan';

EXEC ADD_CUSTOMER @PCUSTID = 365, @PCUSTNAME = 'Larry';

EXEC ADD_CUSTOMER @PCUSTID = 500, @PCUSTNAME = 'Jessie';

SELECT * FROM CUSTOMER;

/*PROCEDURE 2*/
IF OBJECT_ID('DELETE_ALL_CUSTOMERS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_CUSTOMERS;
GO
CREATE PROCEDURE DELETE_ALL_CUSTOMERS AS 
BEGIN
  BEGIN TRY
    SELECT COUNT(*) AS "Rows Deleted" FROM CUSTOMER;
    DELETE FROM CUSTOMER;
  END TRY
  BEGIN CATCH
    BEGIN
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
      THROW 50000, @ERRORMESSAGE, 1
    END;
  END CATCH;
END;

EXEC DELETE_ALL_CUSTOMERS;

/*PROCEDURE 3*/
IF OBJECT_ID('ADD_PRODUCT') IS NOT NULL
DROP PROCEDURE ADD_PRODUCT;
GO
CREATE PROCEDURE ADD_PRODUCT @PPRODID INT, @PPRODNAME NVARCHAR(100), @PPRICE MONEY AS

BEGIN
    BEGIN TRY

        IF @PPRODID < 1000 OR @PPRODID > 2500
            THROW 50040, 'Product ID out of range', 1
        IF @PPRICE < 0 OR @PPRICE > 999.99
            THROW 50050, 'Price out of range', 1

        INSERT INTO PRODUCT (PRODNAME, SELLING_PRICE, SALES_YTD, PRODID) 
        VALUES (@PPRODNAME, @PPRICE, 0, @PPRODID);

    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER() = 2627
            THROW 50030, 'Duplicate product ID', 1
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END; 
    END CATCH;
END;

GO

EXEC ADD_PRODUCT @PPRODID = 1127, @PPRODNAME = 'PC', @PPRICE = 388;

EXEC ADD_PRODUCT @PPRODID = 2182, @PPRODNAME = 'Toilet Paper', @PPRICE = 12;

EXEC ADD_PRODUCT @PPRODID = 1333, @PPRODNAME = 'Crayon', @PPRICE = 5;

EXEC ADD_PRODUCT @PPRODID = 1876, @PPRODNAME = 'Spoon', @PPRICE = 24;

EXEC ADD_PRODUCT @PPRODID = 2007, @PPRODNAME = 'Water Bottle', @PPRICE = 34;

SELECT * FROM PRODUCT;

DELETE FROM PRODUCT;

/*PROCEDURE 4*/
IF OBJECT_ID('DELETE_ALL_PRODUCTS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_PRODUCTS;
GO
CREATE PROCEDURE DELETE_ALL_PRODUCTS AS 
BEGIN
  BEGIN TRY
    SELECT COUNT(*) AS "Rows Deleted" FROM PRODUCT;
    DELETE FROM PRODUCT;
  END TRY
  BEGIN CATCH
    BEGIN
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
      THROW 50000, @ERRORMESSAGE, 1
    END;
  END CATCH;
END;

EXEC DELETE_ALL_PRODUCTS;

/*PROCEDURE 5*/
